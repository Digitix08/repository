<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1250">
<title>New Page 2</title>
<script>
(function() {
    const FLASH_MIMETYPE = "application/x-shockwave-flash";
    const FUTURESPLASH_MIMETYPE = "application/futuresplash";
    const FLASH7_AND_8_MIMETYPE = "application/x-shockwave-flash2-preview";
    const FLASH_MOVIE_MIMETYPE = "application/vnd.adobe.flash.movie";
    const FLASH_ACTIVEX_CLASSID = "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000";

    class RuffleMimeTypeArray {
        constructor(mimeTypes) {
            this.__mimeTypes = [];
            this.__namedMimeTypes = {};
            if (mimeTypes) {
                for (let i = 0; i < mimeTypes.length; i++) {
                    this.install(mimeTypes[i]);
                }
            }
        }
        install(mimeType) {
            const index = this.__mimeTypes.length;
            this.__mimeTypes.push(mimeType);
            this.__namedMimeTypes[mimeType.type] = mimeType;
            this[mimeType.type] = mimeType;
            this[index] = mimeType;
        }
        item(index) {
            // This behavior is done to emulate a 32-bit uint,
            // which browsers use.
            return this.__mimeTypes[index >>> 0];
        }
        namedItem(name) {
            return this.__namedMimeTypes[name];
        }
        get length() {
            return this.__mimeTypes.length;
        }
        [Symbol.iterator]() {
            return this.__mimeTypes[Symbol.iterator]();
        }
    }
    class RufflePlugin extends RuffleMimeTypeArray {
        constructor(name, description, filename) {
            super();
            this.name = name;
            this.description = description;
            this.filename = filename;
        }
    }
    class RufflePluginArray {
        constructor(plugins) {
            this.__plugins = [];
            this.__namedPlugins = {};
            for (let i = 0; i < plugins.length; i++) {
                this.install(plugins[i]);
            }
        }
        install(plugin) {
            const index = this.__plugins.length;
            this.__plugins.push(plugin);
            this.__namedPlugins[plugin.name] = plugin;
            this[plugin.name] = plugin;
            this[index] = plugin;
        }
        item(index) {
            // This behavior is done to emulate a 32-bit uint,
            // which browsers use. Cloudflare's anti-bot
            // checks rely on this.
            return this.__plugins[index >>> 0];
        }
        namedItem(name) {
            return this.__namedPlugins[name];
        }
        refresh() {
            // Nothing to do, we just need to define the method.
        }
        [Symbol.iterator]() {
            return this.__plugins[Symbol.iterator]();
        }
        get length() {
            return this.__plugins.length;
        }
    }
    /**
     * A fake plugin designed to trigger Flash detection scripts.
     */
    const FLASH_PLUGIN = new RufflePlugin("Shockwave Flash", "Shockwave Flash 32.0 r0", "ruffle.js");
    /**
     * A fake plugin designed to allow early detection of if the Ruffle extension is in use.
     */
    const RUFFLE_EXTENSION = new RufflePlugin("Ruffle Extension", "Ruffle Extension", "ruffle.js");
    FLASH_PLUGIN.install({
        type: FUTURESPLASH_MIMETYPE,
        description: "Shockwave Flash",
        suffixes: "spl",
        enabledPlugin: FLASH_PLUGIN,
    });
    FLASH_PLUGIN.install({
        type: FLASH_MIMETYPE,
        description: "Shockwave Flash",
        suffixes: "swf",
        enabledPlugin: FLASH_PLUGIN,
    });
    FLASH_PLUGIN.install({
        type: FLASH7_AND_8_MIMETYPE,
        description: "Shockwave Flash",
        suffixes: "swf",
        enabledPlugin: FLASH_PLUGIN,
    });
    FLASH_PLUGIN.install({
        type: FLASH_MOVIE_MIMETYPE,
        description: "Shockwave Flash",
        suffixes: "swf",
        enabledPlugin: FLASH_PLUGIN,
    });
    RUFFLE_EXTENSION.install({
        type: "",
        description: "Ruffle Detection",
        suffixes: "",
        enabledPlugin: RUFFLE_EXTENSION,
    });
    function installPlugin(plugin) {
        if (!("install" in navigator.plugins) || !navigator.plugins["install"]) {
            Object.defineProperty(navigator, "plugins", {
                value: new RufflePluginArray(navigator.plugins),
                writable: false,
            });
        }
        const plugins = navigator.plugins;
        plugins.install(plugin);
        if (plugin.length > 0 &&
            (!("install" in navigator.mimeTypes) || !navigator.mimeTypes["install"])) {
            Object.defineProperty(navigator, "mimeTypes", {
                value: new RuffleMimeTypeArray(navigator.mimeTypes),
                writable: false,
            });
        }
        const mimeTypes = navigator.mimeTypes;
        for (let i = 0; i < plugin.length; i += 1) {
            mimeTypes.install(plugin[i]);
        }
    }

    installPlugin(FLASH_PLUGIN);
    installPlugin(RUFFLE_EXTENSION);
})();
</script>
<meta name="Microsoft Theme" content="none, default">
<style type="text/css">
.auto-style2 {
	color: #646464;
}
</style>
</head>

<body>

<p><a href="index.htm">
<img border="0" id="img4" src="images/buttons/buttonG.jpg" height="20" width="100" alt="Home" onmouseover="FP_swapImg(1,0,/*id*/'img4',/*url*/'images/buttons/buttonH.jpg')" onmouseout="FP_swapImg(0,0,/*id*/'img4',/*url*/'images/buttons/buttonG.jpg')" onmousedown="FP_swapImg(1,0,/*id*/'img4',/*url*/'images/buttons/buttonI.jpg')" onmouseup="FP_swapImg(0,0,/*id*/'img4',/*url*/'images/buttons/buttonH.jpg')" fp-style="fp-btn: Border Bottom 1" fp-title="Home">
	<a href="new_page_2.htm">
<img border="0" id="img2" src="images/buttons/button15.jpg" height="20" width="100" alt="Register"   onmouseover="FP_swapImg(1,0,/*id*/'img2',/*url*/'images/buttons/button16.jpg')" onmouseout="FP_swapImg(0,0,/*id*/'img2',/*url*/'images/buttons/button15.jpg')" onmousedown="FP_swapImg(1,0,/*id*/'img2',/*url*/'images/buttons/button17.jpg')" onmouseup="FP_swapImg(0,0,/*id*/'img2',/*url*/'images/buttons/button16.jpg')"></a>
	<a href="index-old.htm">
<img border="0" id="img1" src="images/buttons/button5.jpg" height="20" width="100" alt="Search"  onmouseover="FP_swapImg(1,0,/*id*/'img1',/*url*/'images/buttons/button6.jpg')" onmouseout="FP_swapImg(0,0,/*id*/'img1',/*url*/'images/buttons/button5.jpg')" onmousedown="FP_swapImg(1,0,/*id*/'img1',/*url*/'images/buttons/button7.jpg')" onmouseup="FP_swapImg(0,0,/*id*/'img1',/*url*/'images/buttons/button6.jpg')"></a>
	<a href="http://www.google.com">
<img border="0" id="img3" src="images/buttons/button9.jpg" height="20" width="100" alt="Actual search" onmouseover="FP_swapImg(1,0,/*id*/'img3',/*url*/'images/buttons/buttonA.jpg')" onmouseout="FP_swapImg(0,0,/*id*/'img3',/*url*/'images/buttons/button9.jpg')" onmousedown="FP_swapImg(1,0,/*id*/'img3',/*url*/'images/buttons/buttonB.jpg')" onmouseup="FP_swapImg(0,0,/*id*/'img3',/*url*/'images/buttons/buttonA.jpg')"  ></a></p>
<hr>
<h1>Minecraft</h1>
<hr>
<h2>Servers</h2>
<h3>1:gabiblog (nebunii de pe mc)</h3>
<p>Minecraft bedrock v<span>1.20.80.01</span></p>
<p>Server hostat pe <a href="http://aternos.org/server">aternos</a></p>
<table style="width: 400px">
	<tr>
		<td width="40px">ip</td>
		<td style="border-style: solid; border-width: 2px">iamdumb20<span class="auto-style2">.aternos.me</span></td>
	</tr>
	<tr>
		<td>port</td>
		<td style="border-style: solid; border-width: 2px">56560</td>
	</tr>
</table>
<h3>2:server2</h3>
	<p>Server hostat pe <a href="http://aternos.org/server">aternos</a></p>
	<p>Minecraft java v<span>1.20.4</span></p>
<table style="width: 400px">
	<tr>
		<td width="40px">ip</td>
		<td style="border-style: solid; border-width: 2px">iamdumb20uVvn<span class="auto-style2">.aternos.me:18052</span></td>
	</tr>
</table>
<p>Serverul nu este tot timpul pornit. Pentru a-l porni, intrati <a href="http://aternos.org/server">aici</a> si logati va in cont cu aceste detalii:</p>
<table style="width: 400px">
	<tr>
		<td width="60px">nume</td>
		<td style="border-style: solid; border-width: 2px">&nbsp;</td>
	</tr>
	<tr>
		<td>parola</td>
		<td style="border-style: solid; border-width: 2px">&nbsp;</td>
	</tr>
</table>
</body>

</html>
